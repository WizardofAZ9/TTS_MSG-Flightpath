#include TTS_xwing/src/Dimensions
dork = self

assignedShip = nil
drop_offset = 0.78
local spawnedRuler = nil

function update()
    if self.getDescription() == 'r' then
        if ToggleRuler3() then
            printToAll('Spawning ' .. self.getName() .. ' guide', {0, 1, 1})
        end
        self.setDescription('')
    end
end

function ToggleRuler1()
    return ToggleRuler(1)
end

function ToggleRuler3()
    return ToggleRuler(3)
end

function DeleteRuler()
    if spawnedRuler  then
        spawnedRuler.destruct()
        spawnedRuler = nil
    end
end

function ToggleRuler(range)
    if spawnedRuler  then
        spawnedRuler.destruct()
        spawnedRuler = nil
        if spawnedRulerRange == range then
            return false
        end
    end
    local params = {
        type = 'Custom_Model',
        position = self.positionToWorld({0, 0, 0}),
        rotation = self.getRotation(),
        scale = vector(1,1,1)
    }
    local custom = {
        mesh = '{verifycache}https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/arcranges/DRK1/R' .. tostring(range) .. '.obj',
        collider = 'http://pastebin.com/raw.php?i=UK3Urmw1'
    }
    local removeButton = {
        click_function = 'DeleteRuler',
        label = 'DEL',
        function_owner = self,
        position = {0, 0.1, 0},
        rotation = {0, 270, 0},
        width = 750,
        height = 750,
        font_size = 250,
        color = {0.7, 0.7, 0.7}
    }
    spawnedRuler = spawnObject(params)
    spawnedRuler.setCustomObject(custom)
    spawnedRuler.setColorTint(color(1,1,0,0.2))
    vector_lines = {}
    for k,obj in pairs(getAllObjects()) do
        if obj ~= nil and obj.tag == 'Figurine' and obj.getVar('__XW_Ship') == true then
            my_pos = self.getNearestPointFromObject(obj) + vector(0,0.1,0)
            other_pos = obj.getNearestPointFromObject(self)
            other_pos.y = my_pos.y

            distance = Convert_igu_mm(math.sqrt(math.pow(my_pos.x - other_pos.x,2) + math.pow(my_pos.z - other_pos.z,2)))
            if distance < range*100 then
                table.insert(vector_lines, {
                    points = {spawnedRuler.positionToLocal(my_pos), spawnedRuler.positionToLocal(other_pos)},
                    color = {1,1,1},
                    thickness = 0.1,
                    rotation = vector(0,0,0)
                })
            end
        end
    end
    spawnedRuler.setVectorLines(vector_lines)
    spawnedRuler.createButton(removeButton)
    spawnedRuler.lock()
    spawnedRulerRange = range
    return true
end

function onSave()
    if assignedShip ~= nil then
        local state = {assignedShipGUID=assignedShip.getGUID()}
        return JSON.encode(state)
    end
end

function onLoad(save_state)
    self.addContextMenuItem("Toggle Range 1", ToggleRuler1, false)
    self.addContextMenuItem("Toggle Range 3", ToggleRuler3, false)
end


-- Assign on drop near a small base ship
function onDropped()
    if assignedShip == nil then
        local spos = self.getPosition()
        local nearest = nil
        local minDist = 2.89 -- 80mm
        for k,ship in pairs(getAllObjects()) do
            if ship.tag == 'Figurine' and ship.name ~= '' then
                local pos = ship.getPosition()
                local dist = math.sqrt(math.pow((spos[1]-pos[1]),2) + math.pow((spos[3]-pos[3]),2))
                if dist < minDist then
                    nearest = ship
                    minDist = dist
                end
            end
        end
        if nearest ~= nil then
            printToAll('DRK-1 Probe preparing to drop/lauch')
            initialP = self.getPosition()
            assignedShip = nearest
            local pos = assignedShip.getPosition()
            local rot = assignedShip.getRotation()
            local newPos = {}
            newPos[1] = pos[1]
            newPos[2] = 1.21
            newPos[3] = pos[3]
            self.setPosition(newPos)
            self.setRotation(rot)
            launchDrop()
        end
    end
end

function launchDrop()
    self.lock()
    self.createButton({
      click_function = "prepareDrop",
      function_owner = self,
      label          = "^",
      rotation       = {0,180,0},
      position       = {0,0.1,0.7},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "prepareLaunch",
      function_owner = self,
      label          = "^",
      position       = {0,0.1,-0.7 },
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "cancelDrop",
      function_owner = self,
      label          = "Cancel",
      position       = {1,0.1,0},
      width          = 500,
      height         = 180,
      font_size      = 150
    })
end

function prepareDrop()
    self.clearButtons()
    local rot = self.getRotation()
    local newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+180
    newRot[3]=rot[3]
    self.setRotation(newRot)
    prepareLaunch()
end

function prepareLaunch()
    self.lock()
    local pos = LocalPos(self,{0,0,-drop_offset})
    self.setPosition(pos)
    self.clearButtons()
    dorkDrop()
end


function dorkDrop()
    self.createButton({
      click_function = "dorkDropTR",
      function_owner = self,
      label          = "^",
      position       = {0.8,0.1,-0.7 },
      rotation       = {0,90,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dorkDropBR",
      function_owner = self,
      label          = "^",
      position       = {0.4,0.1,-0.7 },
      rotation       = {0,45,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dorkDropS",
      function_owner = self,
      label          = "^",
      position       = {0,0.1,-0.7 },
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dorkDropBL",
      function_owner = self,
      label          = "^",
      position       = {-0.4,0.1,-0.7 },
      rotation       = {0,-45,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dorkDropTL",
      function_owner = self,
      label          = "^",
      position       = {-0.8,0.1,-0.7 },
      rotation       = {0,-90,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
end

function cancelDrop()
    self.unlock()
    self.clearButtons()
    self.setPosition(initialP)
    assignedShip = nil
end


--[[
Neutral
x=27.36
z=-6.92

bank
x=24.94
z=-1.23

Dx=2.42
Dz=5.76

Turn
x=31.27
z=2.99

Dx=3.96
Dz=3.93

]]

function dorkDropTL()
    print("TL")
    self.clearButtons()
    dork=self
    local pos = LocalPos(dork,{3.93, -0.21, -3.98 + drop_offset})
    local rot = self.getRotation()
    newRot={}
    newRot[1]=rot[1]
    newRot[1]=rot[1]
    newRot[2]=rot[2]+90
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end

function dorkDropBL()
    print("BL")
    self.clearButtons()
    dork=self
    pos = LocalPos(dork,{2.39, -0.21, -5.82 + drop_offset})
    local rot = self.getRotation()
    newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+135
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end

function dorkDropS()
    print("S")
    self.clearButtons()
    dork=self
    pos = LocalPos(dork,{0, -0.21, -5.7 + drop_offset})
    local rot = self.getRotation()
    newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+180
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end

function dorkDropBR()
    print("BR")
    self.clearButtons()
    dork=self
    pos = LocalPos(dork,{-2.39, -0.21, -5.82 + drop_offset})
    local rot = self.getRotation()
    newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+225
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end

function dorkDropTR()
    print("TR")
    self.clearButtons()
    dork=self
    pos = LocalPos(dork,{-3.93, -0.21, -3.98 + drop_offset})
    local rot = self.getRotation()
    newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+270
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end

function mainSet()
    self.clearButtons()
    self.createButton({
      click_function = "dir1",
      function_owner = self,
      label          = "^",
      position       = {0,0.1,-0.7 },
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dir2",
      function_owner = self,
      label          = "^",
      position       = {0.7,0.1,-0.24 },
      rotation       = {0,72,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dir3",
      function_owner = self,
      label          = "^",
      position       = {0.5,0.1,0.5},
      rotation       = {0,144,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dir4",
      function_owner = self,
      label          = "^",
      position       = {-0.5,0.1,0.5},
      rotation       = {0,216,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dir5",
      function_owner = self,
      label          = "^",
      position       = {-0.7,0.1,-0.24},
      rotation       = {0,288,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
end

function dir1()
    moveSet()
end

function dir2()
    local rot = self.getRotation()
    local newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+72
    newRot[3]=rot[3]
    self.setRotation(newRot)
    moveSet()
end

function dir3()
    local rot = self.getRotation()
    local newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+144
    newRot[3]=rot[3]
    self.setRotation(newRot)
    moveSet()
end

function dir4()
    local rot = self.getRotation()
    local newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+216
    newRot[3]=rot[3]
    self.setRotation(newRot)
    moveSet()
end

function dir5()
    local rot = self.getRotation()
    local newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+288
    newRot[3]=rot[3]
    self.setRotation(newRot)
    moveSet()
end

function moveSet()
    self.clearButtons()
    self.createButton({
      click_function = "dorkMoveS",
      function_owner = self,
      label          = "^",
      position       = {0,0.1,-0.7 },
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dorkMoveL",
      function_owner = self,
      label          = "<",
      position       = {-0.4,0.1,-0.7 },
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "dorkMoveR",
      function_owner = self,
      label          = ">",
      position       = {0.4,0.1,-0.7 },
      width          = 200,
      height         = 200,
      font_size      = 150
    })
    self.createButton({
      click_function = "mainSet",
      function_owner = self,
      label          = "B",
      position       = {0,0.1,0},
      width          = 200,
      height         = 200,
      font_size      = 150
    })
end

function dorkMoveS()
    dork=self
    pos = LocalPos(dork,{0, 0, -4.22})
    local rot = self.getRotation()
    newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+180
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end


function dorkMoveL()
    dork=self
    pos = LocalPos(dork,{1.84, 0, -4.44})
    local rot = self.getRotation()
    local newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+135
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end

function dorkMoveR()
    dork=self
    pos = LocalPos(dork,{-1.84, 0, -4.44})
    local rot = self.getRotation()
    local newRot={}
    newRot[1]=rot[1]
    newRot[2]=rot[2]+225
    newRot[3]=rot[3]
    dorkMove(pos,newRot)
    mainSet()
end

function dorkMove(pos,rot)
    self.setPosition(pos)
    self.setRotation(rot)
end



function RotMatrix(axis, angDeg)
    local ang = math.rad(angDeg)
    local cs = math.cos
    local sn = math.sin

    if axis == 'x' then
        return {
                    { 1,        0,             0 },
                    { 0,   cs(ang),   -1*sn(ang) },
                    { 0,   sn(ang),      cs(ang) }
               }
    elseif axis == 'y' then
        return {
                    {    cs(ang),   0,   sn(ang) },
                    {          0,   1,         0 },
                    { -1*sn(ang),   0,   cs(ang) }
               }
    elseif axis == 'z' then
        return {
                    { cs(ang),   -1*sn(ang),   0 },
                    { sn(ang),      cs(ang),   0 },
                    { 0,                  0,   1 }
               }
    end
end

-- Apply given rotation matrix on given vector
-- (multiply matrix and column vector)
function RotateVector(rotMat, vect)
    local out = {0, 0, 0}
    for i=1,3,1 do
        for j=1,3,1 do
            out[i] = out[i] + rotMat[i][j]*vect[j]
        end
    end
    return out
end

-- Sum of two vectors (of any size)
function Vect_Sum(vec1, vec2)
    local out = {}
    local k = 1
    while vec1[k] ~= nil and vec2[k] ~= nil do
        out[k] = vec1[k] + vec2[k]
        k = k+1
    end
    return out
end

function LocalPos(object, position)
    local rot = object.getRotation()
    local lPos = {position[1], position[2], position[3]}
    -- Z-X-Y extrinsic
    local zRot = RotMatrix('z', rot['z'])
    lPos = RotateVector(zRot, lPos)
    local xRot = RotMatrix('x', rot['x'])
    lPos = RotateVector(xRot, lPos)
    local yRot = RotMatrix('y', rot['y'])
    lPos = RotateVector(yRot, lPos)

    return Vect_Sum(lPos, object.getPosition())
end
